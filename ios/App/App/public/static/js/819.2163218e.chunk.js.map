{"version":3,"file":"static/js/819.2163218e.chunk.js","mappings":"uPAoGA,UAvFmC,WAAqB,IAAD,EAC7CA,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MACjB,GAAyCC,EAAAA,EAAAA,KAAyB,CAChEC,MAAOL,EACPM,YAAa,eACbC,UAAW,CAAEC,OAAQ,CAAER,GAAAA,MAHjBS,KAAQC,GAAhB,aAAkC,GAAlC,GAAgBA,cAMhB,GAOIC,EAAAA,EAAAA,IAAwB,CAC1BC,KAAM,WACNC,UAAUC,EAAAA,EAAAA,GAAYC,EAAAA,KARtBC,EADF,EACEA,QACaC,EAFf,EAEEC,UAAaD,OACbE,EAHF,EAGEA,YACAC,EAJF,EAIEA,MACAC,EALF,EAKEA,SACAC,EANF,EAMEA,aAKF,GAA4BC,EAAAA,EAAAA,KAA6B,CACvDC,YAAa,kBAAMtB,EAAS,mCADvBuB,GAAP,gBAIAC,EAAAA,EAAAA,YAAU,WACkB,IAAD,EAArB1B,GAAMU,GACRU,EAAM,CACJO,KAAMjB,EAAciB,MAAQ,GAC5BC,UAAS,UAAElB,EAAckB,iBAAhB,aAAE,EAAyBC,KAAI,SAACC,GAAD,MAAe,CACrDH,MAAc,OAARG,QAAQ,IAARA,OAAA,EAAAA,EAAUC,OAAQ,WAI7B,CAAC/B,EAAIU,EAAeU,IAiBvB,OACE,kBAAMY,UAAU,cAAhB,WACE,SAAC,MAAD,gBACEC,MAAM,aACNC,OAAQlC,GACHiB,EAAOU,MAAQ,CAClBK,UAAW,0BAJf,cAOE,SAAC,MAAD,gBACEhC,GAAG,OACHmC,MAAM,OACNC,YAAY,uBACRf,EAAS,SAJf,IAKEgB,MAAK,OAAEpB,QAAF,IAAEA,GAAF,UAAEA,EAAQU,YAAV,aAAE,EAAcW,eAGzB,SAAC,MAAD,gBACEL,MAAM,+BACNC,OAAQlC,GACHiB,EAAOW,WAAa,CACvBI,UAAW,0BAJf,cAOE,SAAC,IAAD,CACEK,MAAK,OAAEpB,QAAF,IAAEA,OAAF,EAAEA,EAAQW,UACfX,OAAM,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAQW,UAChBT,YAAaA,EACbH,QAASA,EACTK,SAAUA,QAGd,SAAC,KAAD,CAAakB,SAAUjB,GA/CJ,SAACb,GACtBgB,EAAkB,CAChBlB,UAAW,CACTC,QAAO,oBACCR,GAAM,CAAEA,GAAAA,IADV,IAEJ2B,KAAMlB,EAAKkB,KACXC,UAAWnB,EAAKmB,UAAUC,KAAI,SAACC,EAAUU,GAAX,MAAsB,CAClDT,KAAMD,EAASH,KACfc,cAAeD,EAAQ","sources":["admin/pages/Evaluations/EvaluationQuestionFormPage.tsx"],"sourcesContent":["import { joiResolver } from '@hookform/resolvers/joi';\r\nimport { ReactElement, useEffect } from 'react';\r\nimport { FieldError, useForm } from 'react-hook-form';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport {\r\n  useGetQuestionnaireQuery,\r\n  useSaveQuestionnaireMutation,\r\n} from '../../../GraphQl/graphql';\r\nimport { Accordion, FormActions, InputField } from '../../components/molecules';\r\nimport { EvaluationQuestionList } from '../../components/organisms/EvaluationQuestionList/EvaluationQuestionList';\r\nimport { QuestionsInput } from '../../components/organisms/EvaluationQuestionList/EvaluationQuestionList.types';\r\nimport { EvaluationsQuestionsFormSchema } from '../../validations/EvaluationsQuestions.schema';\r\n\r\nconst EvaluationQuestionFormPage = (): ReactElement => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const { data: { questionnaire } = {} } = useGetQuestionnaireQuery({\r\n    skip: !id,\r\n    fetchPolicy: \"network-only\",\r\n    variables: { entity: { id } },\r\n  });\r\n\r\n  const {\r\n    control,\r\n    formState: { errors },\r\n    clearErrors,\r\n    reset,\r\n    register,\r\n    handleSubmit,\r\n  } = useForm<QuestionsInput>({\r\n    mode: 'onChange',\r\n    resolver: joiResolver(EvaluationsQuestionsFormSchema),\r\n  });\r\n  const [saveQuestionnaire] = useSaveQuestionnaireMutation({\r\n    onCompleted: () => navigate('/admin/evaluations/questions'),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (id && questionnaire) {\r\n      reset({\r\n        name: questionnaire.name || '',\r\n        questions: questionnaire.questions?.map((question) => ({\r\n          name: question?.item || '',\r\n        })),\r\n      });\r\n    }\r\n  }, [id, questionnaire, reset]);\r\n\r\n  const handleOnSubmit = (data: QuestionsInput) => {\r\n    saveQuestionnaire({\r\n      variables: {\r\n        entity: {\r\n          ...(!!id && { id }),\r\n          name: data.name,\r\n          questions: data.questions.map((question, index) => ({\r\n            item: question.name,\r\n            sequenceOrder: index + 1,\r\n          })),\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form className=\"min-h-full \">\r\n      <Accordion\r\n        title=\"Stammdaten\"\r\n        open={!!id}\r\n        {...(errors.name && {\r\n          className: 'border border-primary',\r\n        })}\r\n      >\r\n        <InputField\r\n          id=\"name\"\r\n          label=\"Name\"\r\n          placeholder=\"Evaluierungsbogen 1\"\r\n          {...register('name')}\r\n          error={errors?.name?.message}\r\n        />\r\n      </Accordion>\r\n      <Accordion\r\n        title=\"Teilnehmerbefragung - Fragen\"\r\n        open={!!id}\r\n        {...(errors.questions && {\r\n          className: 'border border-primary',\r\n        })}\r\n      >\r\n        <EvaluationQuestionList\r\n          error={errors?.questions as unknown as FieldError}\r\n          errors={errors?.questions}\r\n          clearErrors={clearErrors}\r\n          control={control}\r\n          register={register}\r\n        />\r\n      </Accordion>\r\n      <FormActions onSubmit={handleSubmit(handleOnSubmit)} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default EvaluationQuestionFormPage;\r\n"],"names":["id","useParams","navigate","useNavigate","useGetQuestionnaireQuery","skip","fetchPolicy","variables","entity","data","questionnaire","useForm","mode","resolver","joiResolver","EvaluationsQuestionsFormSchema","control","errors","formState","clearErrors","reset","register","handleSubmit","useSaveQuestionnaireMutation","onCompleted","saveQuestionnaire","useEffect","name","questions","map","question","item","className","title","open","label","placeholder","error","message","onSubmit","index","sequenceOrder"],"sourceRoot":""}