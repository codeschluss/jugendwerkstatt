{"version":3,"file":"static/js/447.bba045a3.chunk.js","mappings":"kTAKMA,GAAqBC,EAAAA,EAAAA,MAEdC,EAAoC,SAAC,GAG7B,IAFnBC,EAEkB,EAFlBA,YACGC,GACe,YAQlB,OACE,SAAC,MAAD,QACEC,SAAO,EACPC,SAVmB,SACrBC,EACAC,GAEIL,GAAaA,EAAYI,IAO3BE,WAAYT,GACRI,K,6BCrBGM,EAAiBC,IAAAA,OAAW,CACvCC,MAAOD,IAAAA,QACJE,MAAMF,IAAAA,OAAW,CAAEG,MAAOH,IAAAA,SAAcI,MAAOJ,IAAAA,YAC/CK,IAAI,GACJC,SAAS,CACR,YAAa,wDCwFnB,EAhFqB,WAAqB,IAAD,MAC/BC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MACjB,GAMIC,EAAAA,EAAAA,IAAwB,CAC1BC,UAAUC,EAAAA,EAAAA,GAAYd,GACtBe,cAAe,CAAEb,MAAO,CAAC,CAAEE,MAAO,GAAIC,MAAO,QAP7CW,EADF,EACEA,MACAC,EAFF,EAEEA,SACAC,EAHF,EAGEA,UACAC,EAJF,EAIEA,aACaC,EALf,EAKEC,UAAaD,OAKDlB,GAAUoB,EAAAA,EAAAA,OAAhBC,KACR,GAAgDC,EAAAA,EAAAA,KAAqB,CACnEC,YAAa,oBACbC,UAAW,CAAElB,GAAAA,KAFf,IAAQe,KAAR,gBAAgC,GAAhC,GAAgBI,KAAAA,OAAhB,MAAuB,KAAvB,EAAoCC,EAApC,EAAoCA,QAIpC,GAAmBC,EAAAA,EAAAA,KAAoB,CACrCC,YAAa,kBAAMpB,EAAS,mBADvBqB,GAAP,gBAIAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACVxB,GACFQ,EAAM,CACJd,MAAK,OAAEyB,QAAF,IAAEA,GAAF,UAAEA,EAAMzB,aAAR,aAAE,EAAa+B,KAAI,SAACC,GAAD,MAAW,CACjC7B,OAAW,OAAJ6B,QAAI,IAAJA,OAAA,EAAAA,EAAM1B,KAAM,GACnBJ,OAAW,OAAJ8B,QAAI,IAAJA,OAAA,EAAAA,EAAMC,OAAQ,WAG1B,CAAC3B,EAAIQ,EAAL,OAAYW,QAAZ,IAAYA,OAAZ,EAAYA,EAAMzB,QAErB,IAgBMkC,GACC,OAALlC,QAAK,IAALA,GAAA,UAAAA,EAAOA,aAAP,mBAAcmC,cAAd,eAAsBJ,KAAI,SAACC,GAAD,MAAW,CACnC9B,MAAK,OAAE8B,QAAF,IAAEA,OAAF,EAAEA,EAAMC,KACb9B,MAAK,OAAE6B,QAAF,IAAEA,OAAF,EAAEA,EAAM1B,SACR,GAET,OAAIoB,GAAgB,uCAGlB,SAAC,KAAD,CAAWU,MAAK,iBAAKX,QAAL,IAAKA,OAAL,EAAKA,EAAMY,SAAX,mBAAsCC,MAAI,EAA1D,UACE,kBAAMC,UAAU,aAAhB,UACGvB,EAAU,WACT,iCACE,SAAC1B,EAAD,CACEkD,QAASN,EACTO,aAAczB,EAAU,SACxB0B,cAAc,EACdnD,YAjCS,SAACoD,GAAD,OACnB5B,EAAS,QAAS4B,EAAQ,CAAEC,gBAAgB,OAkCnC1B,IACC,iBAAMqB,UAAU,eAAhB,mBACIrB,EAAOlB,aADX,aACG,EAAyC6C,cAKlD,SAAC,KAAD,CAAaC,SAAU7B,GAxCZ,SAACI,GAChB,IAAMrB,EAAQqB,EAAKrB,MACnB6B,EAAS,CACPL,UAAW,CACTuB,OAAQ,CACNzC,GAAAA,EACAN,MAAOA,EAAM+B,KAAI,kBAAgB,CAC/BzB,GADe,EAAGH","sources":["admin/components/atoms/Form/MultiSelect/MultiSelect.tsx","admin/validations/UserForm.schema.ts","admin/pages/User/EditUserPage.tsx"],"sourcesContent":["import { FC, ReactElement } from 'react';\r\nimport Select, { ActionMeta } from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport { MultiSelectProps, OptionType } from './MultiSelect.props';\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\nexport const MultiSelect: FC<MultiSelectProps> = ({\r\n  onGetValues,\r\n  ...props\r\n}): ReactElement => {\r\n  const handleOnChange = (\r\n    newValue: unknown,\r\n    _actionMeta: ActionMeta<unknown>\r\n  ) => {\r\n    if (onGetValues) onGetValues(newValue as OptionType[]);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      isMulti\r\n      onChange={handleOnChange}\r\n      components={animatedComponents}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n","import Joi from 'joi';\r\n\r\nexport const UserFormSchema = Joi.object({\r\n  roles: Joi.array()\r\n    .items(Joi.object({ label: Joi.string(), value: Joi.string() }))\r\n    .min(1)\r\n    .messages({\r\n      'array.min': 'Mindestens eine Rolle sollte ausgewÃ¤hlt werden',\r\n    }),\r\n});\r\n","import { ReactElement, useEffect } from 'react';\r\nimport { joiResolver } from '@hookform/resolvers/joi';\r\nimport { FieldError, useForm } from 'react-hook-form';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport {\r\n  useGetRolesQuery,\r\n  useGetUserAdminQuery,\r\n  useSaveUserMutation,\r\n} from '../../../GraphQl/graphql';\r\nimport { MultiSelect } from '../../components/atoms/Form/MultiSelect/MultiSelect';\r\nimport { OptionType } from '../../components/atoms/Form/MultiSelect/MultiSelect.props';\r\nimport { Accordion, FormActions } from '../../components/molecules';\r\nimport { UserFormSchema } from '../../validations/UserForm.schema';\r\nimport { UserFormInputs } from './User.props';\r\n\r\nconst EditUserPage = (): ReactElement => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const {\r\n    reset,\r\n    setValue,\r\n    getValues,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<UserFormInputs>({\r\n    resolver: joiResolver(UserFormSchema),\r\n    defaultValues: { roles: [{ label: '', value: '' }] },\r\n  });\r\n  const { data: roles } = useGetRolesQuery();\r\n  const { data: { user = null } = {}, loading } = useGetUserAdminQuery({\r\n    fetchPolicy: 'cache-and-network',\r\n    variables: { id },\r\n  });\r\n  const [saveUser] = useSaveUserMutation({\r\n    onCompleted: () => navigate('/admin/users'),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (id)\r\n      reset({\r\n        roles: user?.roles?.map((role) => ({\r\n          value: role?.id || '',\r\n          label: role?.name || '',\r\n        })),\r\n      });\r\n  }, [id, reset, user?.roles]);\r\n\r\n  const handleChange = (values: OptionType[]) =>\r\n    setValue('roles', values, { shouldValidate: true });\r\n  const onSubmit = (data: UserFormInputs) => {\r\n    const roles = data.roles as OptionType[];\r\n    saveUser({\r\n      variables: {\r\n        entity: {\r\n          id,\r\n          roles: roles.map(({ value }) => ({\r\n            id: value,\r\n          })),\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  const roleOptions =\r\n    roles?.roles?.result?.map((role) => ({\r\n      label: role?.name,\r\n      value: role?.id,\r\n    })) || [];\r\n\r\n  if (loading) return <p>loading...</p>;\r\n\r\n  return (\r\n    <Accordion title={`${user?.fullname} Rolle zuweisen`} open>\r\n      <form className=\"min-h-full\">\r\n        {getValues('roles') && (\r\n          <>\r\n            <MultiSelect\r\n              options={roleOptions}\r\n              defaultValue={getValues('roles')}\r\n              isSearchable={false}\r\n              onGetValues={handleChange}\r\n            />\r\n            {errors && (\r\n              <span className=\"text-primary\">\r\n                {(errors.roles as unknown as FieldError)?.message}\r\n              </span>\r\n            )}\r\n          </>\r\n        )}\r\n        <FormActions onSubmit={handleSubmit(onSubmit)} />\r\n      </form>\r\n    </Accordion>\r\n  );\r\n};\r\n\r\nexport default EditUserPage;\r\n"],"names":["animatedComponents","makeAnimated","MultiSelect","onGetValues","props","isMulti","onChange","newValue","_actionMeta","components","UserFormSchema","Joi","roles","items","label","value","min","messages","id","useParams","navigate","useNavigate","useForm","resolver","joiResolver","defaultValues","reset","setValue","getValues","handleSubmit","errors","formState","useGetRolesQuery","data","useGetUserAdminQuery","fetchPolicy","variables","user","loading","useSaveUserMutation","onCompleted","saveUser","useEffect","map","role","name","roleOptions","result","title","fullname","open","className","options","defaultValue","isSearchable","values","shouldValidate","message","onSubmit","entity"],"sourceRoot":""}